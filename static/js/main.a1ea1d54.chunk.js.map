{"version":3,"sources":["images/beach.jpg","images/clouds.jpg","images/forest3.jpg","images/temple.jpg","images/sand.jpg","audioSelector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AudioSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","play","selection","birds","Audio","volume","rain","ocean","prayer","loop","togglePlay","bind","assertThisInitialized","choice","e","_this2","changeBg","setState","pause","_this3","react_default","a","createElement","Fragment","className","style","color","onClick","toggleSelection","React","Component","App","imageUrl","beach","temple","mute","backgroundImage","concat","audioSelector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1ea1d54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beach.3c1f74af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.893e7dcb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/forest3.79815029.jpg\";","module.exports = __webpack_public_path__ + \"static/media/temple.88f37b36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sand.ceadf832.jpg\";","import React from 'react';\n\nclass AudioSelector extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            play: false,\n            selection: \"ocean\"\n        };\n\n        this.birds = new Audio('./audio/birds.mp3');\n        this.birds.volume = \"0.8\";\n        this.rain = new Audio('./audio/rain.ogg');\n        this.ocean = new Audio('./audio/ocean.wav');\n        this.prayer = new Audio('./audio/prayer.mp3');\n        this.birds.loop = true;\n        this.rain.loop = true;\n        this.ocean.loop = true;\n        this.prayer.loop = true;\n\n\n\n        this.togglePlay = this.togglePlay.bind(this);\n\n    }\n\n    toggleSelection(choice, e){\n        this.props.changeBg(choice);\n        if(!this.state.play) {\n            this.setState({selection: choice});\n        }else{\n            this.togglePlay();\n            this.setState({selection: choice}, () => this.togglePlay()\n            );\n        }\n    }\n\n    togglePlay(){\n        if(this.state.play){\n            if(this.state.selection){\n                this[this.state.selection].pause();\n            }\n            this.setState({play: false});\n        }else{\n            if(this.state.selection){\n                this[this.state.selection].play();\n            }\n            this.setState({play: true});\n        }\n    }\n\n    render(){\n        return(\n        <>\n        <div className = \"audioSelector\">\n            <div style={{color: \"red\"}}className={this.state.selection === null ? \"selected\" : \"unselected\"} onClick={(e) => this.toggleSelection(null, e)} > Mute </div>\n            <div className={this.state.selection === \"rain\" ? \"selected\" : \"unselected\"} onClick={(e) => this.toggleSelection(\"rain\", e)} > Rain </div>\n            <div className={this.state.selection === \"ocean\" ? \"selected\" : \"unselected\"} onClick={(e) => this.toggleSelection(\"ocean\", e)} > Ocean </div>\n            <div className={this.state.selection === \"birds\" ? \"selected\" : \"unselected\"} onClick={(e) => this.toggleSelection(\"birds\", e)} > Birds </div>\n            <div className={this.state.selection === \"prayer\" ? \"selected\" : \"unselected\"} onClick={(e) => this.toggleSelection(\"prayer\", e)} > Gongs </div>\n\n\n            </div>\n            <button onClick={this.togglePlay}>{this.state.play ? \"pause\" : \"play\"} </button>\n        </>\n        )\n    }\n}\n\nexport default AudioSelector;","import React from 'react';\nimport './App.css';\nimport beach from './images/beach.jpg';\nimport rain from './images/clouds.jpg';\nimport birds from './images/forest3.jpg';\nimport temple from './images/temple.jpg';\nimport mute from './images/sand.jpg';\nimport AudioSelector from './audioSelector';\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {imageUrl: beach};\n\n    this.changeBg = this.changeBg.bind(this);\n  }\n\n  changeBg(selection){\n    switch(selection){\n      case \"ocean\":\n        this.setState({imageUrl: beach});\n        break;\n      case \"rain\":\n        this.setState({ imageUrl: rain });\n        break;\n      case \"birds\":\n        this.setState({ imageUrl: birds });\n        break;\n      case \"prayer\":\n        this.setState({ imageUrl: temple });\n        break;\n      case null:\n        this.setState({ imageUrl: mute });\n        break;\n\n\n    }\n  };\n\n  render(){\n  return(\n    <div className=\"App\" style={{ backgroundImage: `url(${this.state.imageUrl})`}}>\n      <h1>Meditate</h1>\n      <p> Meditation has many clinically demonstrated health benifits and can be done right at your desk. </p>\n\n\n        <AudioSelector changeBg={this.changeBg} />\n    </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}